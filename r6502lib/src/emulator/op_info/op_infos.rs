pub use items::*;

#[iter_mod::make_items]
mod items {
    use crate::emulator::OpInfo;
    use crate::{
        absolute_wrapped, absolute_x_wrapped, absolute_y_wrapped, accumulator_wrapped,
        immediate_wrapped, implied_wrapped, indexed_indirect_x_wrapped, indirect_indexed_y_wrapped,
        indirect_wrapped, relative_wrapped, zero_page_wrapped, zero_page_x_wrapped,
        zero_page_y_wrapped,
    };

    pub const ADC_ABS: OpInfo = absolute_wrapped!(AdcAbs, adc);
    pub const ADC_ABS_X: OpInfo = absolute_x_wrapped!(AdcAbsX, adc);
    pub const ADC_ABS_Y: OpInfo = absolute_y_wrapped!(AdcAbsY, adc);
    pub const ADC_IMM: OpInfo = immediate_wrapped!(AdcImm, adc);
    pub const ADC_IND_X: OpInfo = indexed_indirect_x_wrapped!(AdcIndX, adc);
    pub const ADC_IND_Y: OpInfo = indirect_indexed_y_wrapped!(AdcIndY, adc);
    pub const ADC_ZP: OpInfo = zero_page_wrapped!(AdcZp, adc);
    pub const ADC_ZP_X: OpInfo = zero_page_x_wrapped!(AdcZpX, adc);
    pub const AND_ABS: OpInfo = absolute_wrapped!(AndAbs, and);
    pub const AND_ABS_X: OpInfo = absolute_x_wrapped!(AndAbsX, and);
    pub const AND_ABS_Y: OpInfo = absolute_y_wrapped!(AndAbsY, and);
    pub const AND_IMM: OpInfo = immediate_wrapped!(AndImm, and);
    pub const AND_IND_X: OpInfo = indexed_indirect_x_wrapped!(AndIndX, and);
    pub const AND_IND_Y: OpInfo = indirect_indexed_y_wrapped!(AndIndY, and);
    pub const AND_ZP: OpInfo = zero_page_wrapped!(AndZp, and);
    pub const AND_ZP_X: OpInfo = zero_page_x_wrapped!(AndZpX, and);
    pub const ASL_ABS: OpInfo = absolute_wrapped!(AslAbs, asl);
    pub const ASL_ABS_X: OpInfo = absolute_x_wrapped!(AslAbsX, asl);
    pub const ASL_ACC: OpInfo = accumulator_wrapped!(AslAcc, asl_acc);
    pub const ASL_ZP: OpInfo = zero_page_wrapped!(AslZp, asl);
    pub const ASL_ZP_X: OpInfo = zero_page_x_wrapped!(AslZpX, asl);
    pub const BCC: OpInfo = relative_wrapped!(Bcc, bcc);
    pub const BCS: OpInfo = relative_wrapped!(Bcs, bcs);
    pub const BEQ: OpInfo = relative_wrapped!(Beq, beq);
    pub const BIT_ABS: OpInfo = absolute_wrapped!(BitAbs, bit);
    pub const BIT_ZP: OpInfo = zero_page_wrapped!(BitZp, bit);
    pub const BMI: OpInfo = relative_wrapped!(Bmi, bmi);
    pub const BNE: OpInfo = relative_wrapped!(Bne, bne);
    pub const BPL: OpInfo = relative_wrapped!(Bpl, bpl);
    pub const BRK: OpInfo = implied_wrapped!(Brk, brk);
    pub const BVC: OpInfo = relative_wrapped!(Bvc, bvc);
    pub const BVS: OpInfo = relative_wrapped!(Bvs, bvs);
    pub const CLC: OpInfo = implied_wrapped!(Clc, clc);
    pub const CLD: OpInfo = implied_wrapped!(Cld, cld);
    pub const CLI: OpInfo = implied_wrapped!(Cli, cli);
    pub const CLV: OpInfo = implied_wrapped!(Clv, clv);
    pub const CMP_ABS: OpInfo = absolute_wrapped!(CmpAbs, cmp);
    pub const CMP_ABS_X: OpInfo = absolute_x_wrapped!(CmpAbsX, cmp);
    pub const CMP_ABS_Y: OpInfo = absolute_y_wrapped!(CmpAbsY, cmp);
    pub const CMP_IMM: OpInfo = immediate_wrapped!(CmpImm, cmp);
    pub const CMP_IND_X: OpInfo = indexed_indirect_x_wrapped!(CmpIndX, cmp);
    pub const CMP_IND_Y: OpInfo = indirect_indexed_y_wrapped!(CmpIndY, cmp);
    pub const CMP_ZP: OpInfo = zero_page_wrapped!(CmpZp, cmp);
    pub const CMP_ZP_X: OpInfo = zero_page_x_wrapped!(CmpZpX, cmp);
    pub const CPX_ABS: OpInfo = absolute_wrapped!(CpxAbs, cpx);
    pub const CPX_IMM: OpInfo = immediate_wrapped!(CpxImm, cpx);
    pub const CPX_ZP: OpInfo = zero_page_wrapped!(CpxZp, cpx);
    pub const CPY_ABS: OpInfo = absolute_wrapped!(CpyAbs, cpy);
    pub const CPY_IMM: OpInfo = immediate_wrapped!(CpyImm, cpy);
    pub const CPY_ZP: OpInfo = zero_page_wrapped!(CpyZp, cpy);
    pub const DEC_ABS: OpInfo = absolute_wrapped!(DecAbs, dec);
    pub const DEC_ABS_X: OpInfo = absolute_x_wrapped!(DecAbsX, dec);
    pub const DEC_ZP: OpInfo = zero_page_wrapped!(DecZp, dec);
    pub const DEC_ZP_X: OpInfo = zero_page_x_wrapped!(DecZpX, dec);
    pub const DEX: OpInfo = implied_wrapped!(Dex, dex);
    pub const DEY: OpInfo = implied_wrapped!(Dey, dey);
    pub const EOR_ABS: OpInfo = absolute_wrapped!(EorAbs, eor);
    pub const EOR_ABS_X: OpInfo = absolute_x_wrapped!(EorAbsX, eor);
    pub const EOR_ABS_Y: OpInfo = absolute_y_wrapped!(EorAbsY, eor);
    pub const EOR_IMM: OpInfo = immediate_wrapped!(EorImm, eor);
    pub const EOR_IND_X: OpInfo = indexed_indirect_x_wrapped!(EorIndX, eor);
    pub const EOR_IND_Y: OpInfo = indirect_indexed_y_wrapped!(EorIndY, eor);
    pub const EOR_ZP: OpInfo = zero_page_wrapped!(EorZp, eor);
    pub const EOR_ZP_X: OpInfo = zero_page_x_wrapped!(EorZpX, eor);
    pub const INC_ABS: OpInfo = absolute_wrapped!(IncAbs, inc);
    pub const INC_ABS_X: OpInfo = absolute_x_wrapped!(IncAbsX, inc);
    pub const INC_ZP: OpInfo = zero_page_wrapped!(IncZp, inc);
    pub const INC_ZP_X: OpInfo = zero_page_x_wrapped!(IncZpX, inc);
    pub const INX: OpInfo = implied_wrapped!(Inx, inx);
    pub const INY: OpInfo = implied_wrapped!(Iny, iny);
    pub const JMP_ABS: OpInfo = absolute_wrapped!(JmpAbs, jmp);
    pub const JMP_IND: OpInfo = indirect_wrapped!(JmpInd, jmp);
    pub const JSR: OpInfo = absolute_wrapped!(Jsr, jsr);
    pub const LDA_ABS: OpInfo = absolute_wrapped!(LdaAbs, lda);
    pub const LDA_ABS_X: OpInfo = absolute_x_wrapped!(LdaAbsX, lda);
    pub const LDA_ABS_Y: OpInfo = absolute_y_wrapped!(LdaAbsY, lda);
    pub const LDA_IMM: OpInfo = immediate_wrapped!(LdaImm, lda);
    pub const LDA_IND_X: OpInfo = indexed_indirect_x_wrapped!(LdaIndX, lda);
    pub const LDA_IND_Y: OpInfo = indirect_indexed_y_wrapped!(LdaIndY, lda);
    pub const LDA_ZP: OpInfo = zero_page_wrapped!(LdaZp, lda);
    pub const LDA_ZP_X: OpInfo = zero_page_x_wrapped!(LdaZpX, lda);
    pub const LDX_ABS: OpInfo = absolute_wrapped!(LdxAbs, ldx);
    pub const LDX_ABS_Y: OpInfo = absolute_y_wrapped!(LdxAbsY, ldx);
    pub const LDX_IMM: OpInfo = immediate_wrapped!(LdxImm, ldx);
    pub const LDX_ZP: OpInfo = zero_page_wrapped!(LdxZp, ldx);
    pub const LDX_ZP_Y: OpInfo = zero_page_y_wrapped!(LdxZpY, ldx);
    pub const LDY_ABS: OpInfo = absolute_wrapped!(LdyAbs, ldy);
    pub const LDY_ABS_X: OpInfo = absolute_x_wrapped!(LdyAbsX, ldy);
    pub const LDY_IMM: OpInfo = immediate_wrapped!(LdyImm, ldy);
    pub const LDY_ZP: OpInfo = zero_page_wrapped!(LdyZp, ldy);
    pub const LDY_ZP_X: OpInfo = zero_page_x_wrapped!(LdyZpX, ldy);
    pub const LSR_ABS: OpInfo = absolute_wrapped!(LsrAbs, lsr);
    pub const LSR_ABS_X: OpInfo = absolute_x_wrapped!(LsrAbsX, lsr);
    pub const LSR_ACC: OpInfo = accumulator_wrapped!(LsrAcc, lsr_acc);
    pub const LSR_ZP: OpInfo = zero_page_wrapped!(LsrZp, lsr);
    pub const LSR_ZP_X: OpInfo = zero_page_x_wrapped!(LsrZpX, lsr);
    pub const NOP: OpInfo = implied_wrapped!(Nop, nop);
    pub const ORA_ABS: OpInfo = absolute_wrapped!(OraAbs, ora);
    pub const ORA_ABS_X: OpInfo = absolute_x_wrapped!(OraAbsX, ora);
    pub const ORA_ABS_Y: OpInfo = absolute_y_wrapped!(OraAbsY, ora);
    pub const ORA_IMM: OpInfo = immediate_wrapped!(OraImm, ora);
    pub const ORA_IND_X: OpInfo = indexed_indirect_x_wrapped!(OraIndX, ora);
    pub const ORA_IND_Y: OpInfo = indirect_indexed_y_wrapped!(OraIndY, ora);
    pub const ORA_ZP: OpInfo = zero_page_wrapped!(OraZp, ora);
    pub const ORA_ZP_X: OpInfo = zero_page_x_wrapped!(OraZpX, ora);
    pub const PHA: OpInfo = implied_wrapped!(Pha, pha);
    pub const PHP: OpInfo = implied_wrapped!(Php, php);
    pub const PLA: OpInfo = implied_wrapped!(Pla, pla);
    pub const PLP: OpInfo = implied_wrapped!(Plp, plp);
    pub const ROL_ABS: OpInfo = absolute_wrapped!(RolAbs, rol);
    pub const ROL_ABS_X: OpInfo = absolute_x_wrapped!(RolAbsX, rol);
    pub const ROL_ACC: OpInfo = accumulator_wrapped!(RolAcc, rol_acc);
    pub const ROL_ZP: OpInfo = zero_page_wrapped!(RolZp, rol);
    pub const ROL_ZP_X: OpInfo = zero_page_x_wrapped!(RolZpX, rol);
    pub const ROR_ABS: OpInfo = absolute_wrapped!(RorAbs, ror);
    pub const ROR_ABS_X: OpInfo = absolute_x_wrapped!(RorAbsX, ror);
    pub const ROR_ACC: OpInfo = accumulator_wrapped!(RorAcc, ror_acc);
    pub const ROR_ZP: OpInfo = zero_page_wrapped!(RorZp, ror);
    pub const ROR_ZP_X: OpInfo = zero_page_x_wrapped!(RorZpX, ror);
    pub const RTI: OpInfo = implied_wrapped!(Rti, rti);
    pub const RTS: OpInfo = implied_wrapped!(Rts, rts);
    pub const SBC_ABS: OpInfo = absolute_wrapped!(SbcAbs, sbc);
    pub const SBC_ABS_X: OpInfo = absolute_x_wrapped!(SbcAbsX, sbc);
    pub const SBC_ABS_Y: OpInfo = absolute_y_wrapped!(SbcAbsY, sbc);
    pub const SBC_IMM: OpInfo = immediate_wrapped!(SbcImm, sbc);
    pub const SBC_IND_X: OpInfo = indexed_indirect_x_wrapped!(SbcIndX, sbc);
    pub const SBC_IND_Y: OpInfo = indirect_indexed_y_wrapped!(SbcIndY, sbc);
    pub const SBC_ZP: OpInfo = zero_page_wrapped!(SbcZp, sbc);
    pub const SBC_ZP_X: OpInfo = zero_page_x_wrapped!(SbcZpX, sbc);
    pub const SEC: OpInfo = implied_wrapped!(Sec, sec);
    pub const SED: OpInfo = implied_wrapped!(Sed, sed);
    pub const SEI: OpInfo = implied_wrapped!(Sei, sei);
    pub const STA_ABS: OpInfo = absolute_wrapped!(StaAbs, sta);
    pub const STA_ABS_X: OpInfo = absolute_x_wrapped!(StaAbsX, sta);
    pub const STA_ABS_Y: OpInfo = absolute_y_wrapped!(StaAbsY, sta);
    pub const STA_IND_X: OpInfo = indexed_indirect_x_wrapped!(StaIndX, sta);
    pub const STA_IND_Y: OpInfo = indirect_indexed_y_wrapped!(StaIndY, sta);
    pub const STA_ZP: OpInfo = zero_page_wrapped!(StaZp, sta);
    pub const STA_ZP_X: OpInfo = zero_page_x_wrapped!(StaZpX, sta);
    pub const STX_ABS: OpInfo = absolute_wrapped!(StxAbs, stx);
    pub const STX_ZP: OpInfo = zero_page_wrapped!(StxZp, stx);
    pub const STX_ZP_Y: OpInfo = zero_page_y_wrapped!(StxZpY, stx);
    pub const STY_ABS: OpInfo = absolute_wrapped!(StyAbs, sty);
    pub const STY_ZP: OpInfo = zero_page_wrapped!(StyZp, sty);
    pub const STY_ZP_X: OpInfo = zero_page_x_wrapped!(StyZpX, sty);
    pub const TAX: OpInfo = implied_wrapped!(Tax, tax);
    pub const TAY: OpInfo = implied_wrapped!(Tay, tay);
    pub const TSX: OpInfo = implied_wrapped!(Tsx, tsx);
    pub const TXA: OpInfo = implied_wrapped!(Txa, txa);
    pub const TXS: OpInfo = implied_wrapped!(Txs, txs);
    pub const TYA: OpInfo = implied_wrapped!(Tya, tya);
}
