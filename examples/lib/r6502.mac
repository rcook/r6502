R6502_MODULE = 0
R6502_MODULE_HEADER_LEN = 11
R6502_SNAPSHOT = 1
R6502_SNAPSHOT_HEADER_LEN = 22
R6502_SYSTEM = 2
R6502_SYSTEM_HEADER_LEN = 9

; Insert r6502 module header
; Length: 11 bytes
; A module represents a program or subroutine that runs independently
; of an operating system. The module will be loaded at the load address
; and execution will begin at the start address.
.macro r6502_module machine_tag, load, start
.ifblank machine_tag
    .error "machine_tag undefined"
.endif
.ifblank load
    .error "load undefined"
.endif
.ifblank start
    .error "start undefined"
.endif
.segment "HEADER"
.assert * = $0000, error, "Header must be at $0000"
.dbyt $6502
.byte R6502_MODULE
.byte machine_tag
.assert * = $0007, error, "Machine tag must end at $0007"
.addr load
.addr start
.assert * = R6502_MODULE_HEADER_LEN, error, "Header must end at $000B (11 bytes)"
.endmacro

; Insert r6502 snapshot header
; Length: 22 bytes
; A snapshot captures the full state of execution of the machine
; at a point in time including all addressable memory and all CPU
; registers.
.macro r6502_snapshot machine_tag
.ifblank machine_tag
    .error "machine_tag undefined"
.endif
.segment "HEADER"
.assert * = $0000, error, "Header must be at $0000"
.dbyt $6502
.byte R6502_SNAPSHOT
.byte machine_tag
.assert * = $0007, error, "Machine tag must end at $0007"
.addr $0000             ; PC
.byte $00               ; A
.byte $00               ; X
.byte $00               ; Y
.byte $00               ; SP
.byte $00               ; P
.dword $00000000        ; lo(total_cycles)
.dword $00000000        ; hi(total_cycles)
.assert * = R6502_SNAPSHOT_HEADER_LEN, error, "Header must end at $0016 (22 bytes)"
.endmacro

; Insert r6502 system header
; Length: 9 bytes
; A system snapshot captures the full initial state of the
; machine and is useful for providing a system's operating
; system in ROM. The system snapshot will be loaded at the
; specified load address and will be stared from the 6502
; RESET vector. It's important that the system snapshot
; include valid NMI, RESET and IRQ vectors at the top of
; memory.
.macro r6502_system machine_tag, load
.ifblank machine_tag
    .error "machine_tag undefined"
.endif
.ifblank load
    .error "load undefined"
.endif
.segment "HEADER"
.assert * = $0000, error, "Header must be at $0000"
.dbyt $6502
.byte R6502_SYSTEM
.byte machine_tag
.assert * = $0007, error, "Machine tag must end at $0007"
.addr load
.assert * = R6502_SYSTEM_HEADER_LEN, error, "Header must end at $0009 (9 bytes)"
.endmacro

; sysinit
; Initialize the system
.macro sysinit
.endmacro

; syshalt
; Halt the system
.macro syshalt
.import HALT
    jmp HALT
.endmacro

; Sideways ROM header
.macro sideways_rom_header language, service, rom_type, version, title, version_str, copyright
.local @offset
.importzp CR
.importzp LF
.import SIDEWAYS_ROM_OFFSET
.import SIDEWAYS_ROM_START
.import SIDEWAYS_ROM_TITLE
.assert * = SIDEWAYS_ROM_START, error, "header at expected address"
.ifblank language
    .byte $00, $00, $00
.else
    jmp language
.endif
.ifblank service
    .byte $00, $00, $00
.else
    jmp service
.endif
.ifblank rom_type
    .byte $00
.else
    .byte rom_type
.endif
.assert * = SIDEWAYS_ROM_OFFSET, error, "offset at expected address"
    .byte <@offset
.ifblank version
    .byte $00
.else
    .byte version
.endif
.assert * = SIDEWAYS_ROM_TITLE, error, "title at expected address"
.ifnblank title
    .byte title
.endif
    .byte $00
.ifnblank version_str
    .byte version_str
.endif
@offset:
    .byte $00, "(C)"
.ifnblank copyright
    .byte copyright
.endif
    .byte LF, CR, $00
.endmacro
