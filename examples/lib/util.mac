; stzword0
; Stores word in zword0
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword0 value
.ifblank value
    .error "value undefined"
.endif
    lda #<value
    sta zword0
    lda #>value
    sta zword0 + 1
.endmacro

; stzword1
; Stores word in zword1
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword1 value
.ifblank value
    .error "value undefined"
.endif
    lda #<value
    sta zword1
    lda #>value
    sta zword1 + 1
.endmacro

; stzword2
; Stores word in zword2
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword2 value
.ifblank value
    .error "value undefined"
.endif
    lda #<value
    sta zword2
    lda #>value
    sta zword2 + 1
.endmacro

; stzword3
; Stores word in zword3
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword3 value
.ifblank value
    .error "value undefined"
.endif
    lda #<value
    sta zword3
    lda #>value
    sta zword3 + 1
.endmacro

; print_buf
; Prints zero-terminated string at given address
; params:
;   addr: address of string
; comments:
;   Destroys P, A, Y, zword0, zword0 + 1
.macro print_buf addr
.ifblank value
    .error "addr undefined"
.endif
    stzword0 addr
    jsr print
.endmacro

; print_int
; Prints 32-bit integer at given address
; params:
;   addr: address of value
; comments:
;   Destroys P, A, X, Y, zword0, zword0 + 1
.macro print_int addr
.ifblank value
    .error "addr undefined"
.endif
    lda #$00
    ldx #<addr
    ldy #>addr
    ora #%10000000
    jsr num_to_str
    stx zword0
    sty zword0 + 1
    jsr print
    cld
.endmacro

; add16
; Adds two 16-bit integers at given addresses
; params:
;   left, left + 1: address of left operand
;   right, right + 1: address of right operand
;   result, result + 1: address of result
; comments:
;   Destroys P, A, result, result + 1
.macro add16 left, right, result
.ifblank left
    .error "left undefined"
.endif
.ifblank right
    .error "right undefined"
.endif
.ifblank result
    .error "result undefined"
.endif
    clc
    lda left
    adc right
    sta result
    lda left + 1
    adc right + 1
    sta result + 1
.endmacro

; http://www.6502.org/tutorials/register_preservation.html
.macro save_registers
    pha
    txa
    tsx
    pha
    tya
    pha
    inx
    lda $100, x
    pha
    dex
    lda $100, x
    tax
    pla
.endmacro

.macro restore_registers
    pla
    tay
    pla
    tax
    pla
    rts
.endmacro
