; stzword0
; Stores word in zword0
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword0 value
    lda #<value
    sta zword0
    lda #>value
    sta zword0 + 1
.endmacro

; stzword1
; Stores word in zword1
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword1 value
    lda #<value
    sta zword1
    lda #>value
    sta zword1 + 1
.endmacro

; stzword2
; Stores word in zword2
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword2 value
    lda #<value
    sta zword2
    lda #>value
    sta zword2 + 1
.endmacro

; stzword3
; Stores word in zword3
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stzword3 value
    lda #<value
    sta zword3
    lda #>value
    sta zword3 + 1
.endmacro

; print_buf
; Prints zero-terminated string at given address
; params:
;   addr: address of string
; comments:
;   Destroys P, A, Y, zword0, zword0 + 1
.macro print_buf addr
    stzword0 addr
    jsr print
.endmacro

; print_int
; Prints 32-bit integer at given address
; params:
;   addr: address of value
; comments:
;   Destroys P, A, X, Y, zword0, zword0 + 1
.macro print_int addr
    lda #$00
    ldx #<addr
    ldy #>addr
    ora #%10000000
    jsr num_to_str
    stx zword0
    sty zword0 + 1
    jsr print
    cld
.endmacro

; add16
; Adds two 16-bit integers at given addresses
; params:
;   left_addr, left_addr + 1: address of left operand
;   right_addr, right_addr + 1: address of right operand
;   result_addr, result_addr + 1: address of result
; comments:
;   Destroys P, A, result_addr, result_addr + 1
.macro add16 left_addr, right_addr, result_addr
    clc
    lda left_addr
    adc right_addr
    sta result
    lda left_addr + 1
    adc right_addr + 1
    sta result + 1
.endmacro
