MEMORY {
    HEADER: start = $0000, size = $0009, file = "%O", fill = yes;
    BASICZP: start = $0000, size = $0060 - $0000, file = "";
    ZEROPAGE: start = $0060, size = $00E4 - $0060, file = "";
    MOSZP: start = $00E4, size = $0100 - $00E4, file = "";
    STACK: start = $0100, size = $0200 - $0100, file = "";
    MOSVECTORS: start = $0200, size = $0300 - $0200, file = "";
    LOWRAM: start = $0300, size = $0400 - $0300, file = "";
    BASICWORKSPACE: start = $0400, size = $0800 - $0400, file = "";
    RAM: start = $0800, size = $8000 - $0800, file = "";
    SIDEWAYS: start = $8000, size = $C000 - $8000, file = "";
    OSROM: start = $C000, size = $010000 - $C000, file = "%O", fill = yes;
}

SEGMENTS {
    HEADER: type = ro, load = HEADER;
    ZEROPAGE: type = rw, load = ZEROPAGE;

    # Code and data that resides and runs in RAM
    CODE: type = rw, load = RAM;

    # MOS initialization routine
    MOSINIT: type = ro, load = OSROM, define = yes;

    # MOS routines
    MOS: type = ro, load = OSROM;

    # MOS read-only data
    MOSDATA: type = ro, load = OSROM;

    # Debugging hooks
    HALT: type = overwrite, load = OSROM, start = $FFA0;

    # Acorn MOS operating system routines
    OSCLI: type = overwrite, load = OSROM, start = $FFF7;
    OSBYTE: type = overwrite, load = OSROM, start = $FFF4;
    OSWORD: type = overwrite, load = OSROM, start = $FFF1;
    OSWRCH: type = overwrite, load = OSROM, start = $FFEE;
    OSNEWL: type = overwrite, load = OSROM, start = $FFE7;
    OSASCI: type = overwrite, load = OSROM, start = $FFE3;
    OSRDCH: type = overwrite, load = OSROM, start = $FFE0;
    OSFILE: type = overwrite, load = OSROM, start = $FFDD;
    OSARGS: type = overwrite, load = OSROM, start = $FFDA;
    OSBGET: type = overwrite, load = OSROM, start = $FFD7;
    OSBPUT: type = overwrite, load = OSROM, start = $FFD4;
    OSGBPB: type = overwrite, load = OSROM, start = $FFD1;
    OSFIND: type = overwrite, load = OSROM, start = $FFCE;

    # 6502 vectors
    NMI: type = overwrite, load = OSROM, start = $FFFA;
    RESET: type = overwrite, load = OSROM, start = $FFFC;
    IRQ: type = overwrite, load = OSROM, start = $FFFE;
}
