MEMORY {
    HEADER: start = $0000, size = $000B, file = "%O", fill = yes;
    BASICZP: start = $0000, size = $0060 - $0000, file = "";
    ZEROPAGE: start = $0060, size = $00E4 - $0060, file = "";
    MOSZP: start = $00E4, size = $0100 - $00E4, file = "";
    STACK: start = $0100, size = $0200 - $0100, file = "";
    OSVECTORS: start = $0200, size = $0300 - $0200, file = "";
    LOWRAM: start = $0300, size = $0400 - $0300, file = "";
    BASICWORKSPACE: start = $0400, size = $0800 - $0400, file = "";
    RAM: start = $0800, size = $8000 - $0800, file = "";
    SIDEWAYS: start = $8000, size = $C000 - $8000, file = "";
    OSROM0: start = $C000, size = $F000 - $C000, file = "%O", fill = yes;
    OSROM1: start = $F000, size = $FC00 - $F000, file = "%O", fill = yes;
    PIA: start = $FC00, size = $FC04 - $FC00, file = "%O", fill = yes;
    OSROM2: start = $FC04, size = $FFFA - $FC04, file = "%O", fill = yes;
    VECTORS: start = $FFFA, size = $010000 - $FFFA, file = "%O", fill = yes;
}

SEGMENTS {
    HEADER: type = ro, load = HEADER;
    ZEROPAGE: type = rw, load = ZEROPAGE;

    # Code and data that resides and runs in RAM
    CODE: type = rw, load = RAM;

    # Data that resides in ROM and is relocated to $0200 at startup
    #DATA: type = ro, load = OSROM1, run = OSVECTORS, define = yes;

    # Code and data that resides and runs in sideways ROM/RAM
    #SIDEWAYSCODE: type = ro, load = SIDEWAYS;
    #SIDEWAYSDATA: type = ro, load = SIDEWAYS;

    # Code and data that resides and runs in OS ROM
    ROCODE: type = ro, load = OSROM0, define = yes;
    #RODATA: type = ro, load = OSROM1, define = yes;

    # MOS initialization routine
    MOSINIT: type = overwrite, load = OSROM0, start = $D000;

    # 6502 vectors
    NMI: type = overwrite, load = VECTORS, start = $FFFA;
    RESET: type = overwrite, load = VECTORS, start = $FFFC;
    IRQ: type = overwrite, load = VECTORS, start = $FFFE;

    # Debugging hooks
    HALT: type = overwrite, load = OSROM2, start = $FFA0;

    # Acorn MOS operating system routines
    OSCLI: type = overwrite, load = OSROM2, start = $FFF7;
    OSBYTE: type = overwrite, load = OSROM2, start = $FFF4;
    OSWORD: type = overwrite, load = OSROM2, start = $FFF1;
    OSWRCH: type = overwrite, load = OSROM2, start = $FFEE;
    OSNEWL: type = overwrite, load = OSROM2, start = $FFE7;
    OSASCI: type = overwrite, load = OSROM2, start = $FFE3;
    OSRDCH: type = overwrite, load = OSROM2, start = $FFE0;
    OSFILE: type = overwrite, load = OSROM2, start = $FFDD;
    OSARGS: type = overwrite, load = OSROM2, start = $FFDA;
    OSBGET: type = overwrite, load = OSROM2, start = $FFD7;
    OSBPUT: type = overwrite, load = OSROM2, start = $FFD4;
    OSGBPB: type = overwrite, load = OSROM2, start = $FFD1;
    OSFIND: type = overwrite, load = OSROM2, start = $FFCE;
}
