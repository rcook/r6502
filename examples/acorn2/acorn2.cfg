MEMORY {
    HEADER: start = $0000, size = $000B, file = "%O", fill = yes;
    ZEROPAGE: start = $0000, size = $0100 - $0000, file = "";
    STACK: start = $0100, size = $0200 - $0100, file = "";
    RAM: start = $0200, size = $8000 - $0200, file = "";
    SIDEWAYS: start = $8000, size = $C000 - $8000, file = "";
    OSROM0: start = $C000, size = $F000 - $C000, file = "%O", fill = yes;
    OSROM1: start = $F000, size = $FC00 - $F000, file = "%O", fill = yes;
    PIA: start = $FC00, size = $FC04 - $FC00, file = "%O", fill = yes;
    OSROM2: start = $FC04, size = $010000 - $FC04, file = "%O", fill = yes;
}

SEGMENTS {
    HEADER: type = ro, load = HEADER;
    ZEROPAGE: type = rw, load = ZEROPAGE;

    # Code and data that resides and runs in RAM
    CODE: type = ro, load = RAM;
    DATA: type = ro, load = RAM;

    # Code and data that resides and runs in sideways ROM/RAM
    #SIDEWAYSCODE: type = ro, load = SIDEWAYS;
    #SIDEWAYSDATA: type = ro, load = SIDEWAYS;

    # Code and data that resides and runs in OS ROM
    ROCODE: type = ro, load = OSROM0, define = yes;
    RODATA: type = ro, load = OSROM1, define = yes;

    # MOS subroutines and 6502 vectors
    HALT: type = overwrite, load = OSROM2, start = $FFC0;
    OSIRQ: type = overwrite, load = OSROM2, start = $FFD0;
    OSWRCH: type = overwrite, load = OSROM2, start = $FFEE;
    NMI: type = overwrite, load = OSROM2, start = $FFFA;
    RESET: type = overwrite, load = OSROM2, start = $FFFC;
    IRQ: type = overwrite, load = OSROM2, start = $FFFE;
}
