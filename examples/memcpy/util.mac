; stazptr0
; Stores word in zptr0
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stazptr0 value
    lda #<value
    sta zptr0
    lda #>value
    sta zptr0 + 1
.endmacro

; stazptr1
; Stores word in zptr1
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stazptr1 value
    lda #<value
    sta zptr1
    lda #>value
    sta zptr1 + 1
.endmacro

; stazptr2
; Stores word in zptr2
; params:
;   value: 16-bit value
; comments:
;   Destroys A
.macro stazptr2 value
    lda #<value
    sta zptr2
    lda #>value
    sta zptr2 + 1
.endmacro

; print_buf
; Prints zero-terminated string at given address
; params:
;   addr: address of string
; comments:
;   Destroys P, A, Y, zptr0, zptr0 + 1
.macro print_buf addr
    stazptr0 addr
    jsr print
.endmacro

; print_int
; Prints 32-bit integer at given address
; params:
;   addr: address of value
; comments:
;   Destroys P, A, X, Y, zptr0, zptr0 + 1
.macro print_int addr
    lda #$00
    ldx #<addr
    ldy #>addr
    ora #%10000000
    jsr num_to_str
    stx zptr0
    sty zptr0 + 1
    jsr print
    cld
.endmacro

; add16
; Adds two 16-bit integers at given addresses
; params:
;   left_addr, left_addr + 1: address of left operand
;   right_addr, right_addr + 1: address of right operand
;   result_addr, result_addr + 1: address of result
; comments:
;   Destroys P, A, result_addr, result_addr + 1
.macro add16 left_addr, right_addr, result_addr
    clc
    lda left_addr
    adc right_addr
    sta result
    lda left_addr + 1
    adc right_addr + 1
    sta result + 1
.endmacro
