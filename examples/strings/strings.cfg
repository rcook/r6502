SYMBOLS {
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    _peripherals:  type = export, value = $FFC0;
}

MEMORY {
    HEADER:     file = %O,               start = $0000, size = $000C;
    ZP:         file = %O,               start = $0000, size = $0100 - $0000, fill = yes;
    STACK:      file = %O,               start = $0100, size = $0200 - $0100, fill = yes;
    RESERVED0:  file = %O,               start = $0200, size = $0E00 - $0200, fill = yes;
    MAIN:       file = %O, define = yes, start = $0E00, size = $8000 - $0E00, fill = yes;
    ROM:        file = %O, define = yes, start = $8000, size = $FC00 - $8000, fill = yes;
    IO:         file = %O,               start = $FC00, size = $FF00 - $FC00, fill = yes;
    RESERVED1:  file = %O,               start = $FF00, size = $FFEE - $FF00, fill = yes;
    OSWRCH:     file = %O,               start = $FFEE, size = $10000 - $FFEE, fill = yes;
}

SEGMENTS {
    ZEROPAGE: load = ZP,     type = zp;
    EXEHDR:   load = HEADER, type = ro;
    STARTUP:  load = MAIN,   type = ro;
    LOWCODE:  load = MAIN,   type = ro, optional = yes;
    ONCE:     load = MAIN,   type = ro, optional = yes;
    CODE:     load = MAIN,   type = ro;
    RODATA:   load = MAIN,   type = ro;
    DATA:     load = MAIN,   type = rw;
    BSS:      load = MAIN,   type = bss, define = yes;
    OSWRCH:   load = OSWRCH, type = ro, define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
